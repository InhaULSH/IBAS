#조건문
#조건에 따라 실행할 명령을 정할 수 있는 구문이야
#if (조건 : bool형) :
#   실행되는 문장
#이처럼 if와 조건을 제시한다음에 : 이후가 실행될 문장이야, 실행될 문장은 들여쓰기 여부로 판단해, 들여쓰기가 되있으면 조건문에 걸린 문장! 아니면 조건문과 상관없는 문장!
if (5 == 6) :
    print("5는 6과 같다")
#이때는 조건에 False아니면 True중에 하나만 들어가는데
#5는 6과 같지 않으므로 조건절에 False가 들어 간거랑 같아
if (5 > 6 or 7 > 6) :
    print("6은 5 초과거나 7초과이다")
#이때는 조건에 True가 들어 간거랑 같아
#이때 True면 실행하고 False면 실행하지 않아
#elif (조건절) :
#   실행되는 문장
#이처럼 elif는 앞 if문의 조건이 모두 거짓이고(실행되지 않고) elif의 조건이 참일때 문장을 실행시켜 => else + if 같은 기능을 해
#else :
#   실행되는 문장
#이처럼 else는 앞 if문의 조건이 모두 거짓일때(실행되지 않았을때) 문장을 실행시켜
#if - elif - else 으로 묶인 조건문을 실행하면 조건을 만족하는 하나의 조건문만 실행되고 다른 조건문은 실행되지 않아 => 효율적인 연산 and 논리적 구조가 정확해

#이중 조건문
#조건문 안에 조건문을 넣을 수 있어
#if (조건) :
#   실행되는 문장
#   if (조건) :
#       실행되는 문장
#   elif (조건) :
#       실행되는 문장
#   else :
#       실행되는 문장
#이처럼 복잡한 조건문을 실행시키기에 좋아

#반복문
#조건에 따라 명령을 반복시킬 수 있는 구문이야
#while (조건) :
#   실행할 문장
#조건이 True면 문장을 반복실행 시켜주고, False면 실행을 중단해
i = 0
while (i < 5) :
    print(i)
    i += 1
#이렇게 조건과 관련된 변수를 실행할 문장에서 건드려서 반복을 빠져나올수도 있어
i = 0
while True :
    i += 1
    if (i == 5) :
        break
#그래서 while은 보통 True로 두고 조건문과 변수 건드리기를 통해 반복을 빠져나오도록 만드는 경우가 많아
#이때 break는 조건문을 무조건 빠져나오는 명령어야, continue는 무조건 반복문의 처음으로 돌아가는 명령어야
i = 0
while True :
    if (i == 1):
        continue
    else :
        i += 1
#따라서 조건문에 따라 i에 1이 더해지고 나서 조건문에 따라 continue를 만나자마자 처음으로 돌아가고 다시 조건문에 따라 continue를 만나서 처음으로 돌아가고를 무한반복해
#for 이터레이터변수 in 자료구조 등등 :
#   실행할 문장
#횟수에 제한을 두거나 특정 자료구조에 접근하고자 할때 많이 써
for No in [1,2,3,4,5] :
    print(No)
#이렇게 자료구조에 직접 접근할 수 있어, 이때 처음부터 자료구조에 접근해서 인덱싱하는 변수를 만든게 이터레이터라고 해 여기서는 No가 이터레이터가 되,이터레이터 변수는 미리 선언할 필요가 없어
for i in range(8) :
    print(i)
#이렇게 range 함수는 0에서 시작해서 연속된 숫자로 이루어진 리스트를 만들어주는 역할을 해 이때 0부터 []안의 숫자 - 1 까지 숫자까지를 요소로 가져
for X in range[1:4] :
    print(X)
#이처럼 range 함수를 사용할때 숫자의 범위를 구체적으로 정할 수 있어
#이중 for 문
for X in range[2:10] :
   for Y in range[1:10] :
       print(X,"=",Y,"=",X*Y)
#이때 X가 2로 시작했을때 Y가 1부터 9까지 차례로 접근하면서 구구단을 출력해(안쪽 for문), 그다음 X가 3이 되었을때 다시 Y가 1부터 9까지 접근하면서 다시 출력해 이걸 X가 9가 될때까지 반복하는 거야(밖의 for문)
#for문을 활용하기
Sum = 0
for No in [11,22,33,44,55,66] :
    Sum =+ No
#이때 Sum이 0일때 시작해서 이터레이터가 요소들을 차례로 접근하면서 Sum에 더하게되 이걸 이용해 복잡한 숫자의 합을 구할 수 있어

#len 함수
#리스트,튜플,딕셔너리의 길이를 반환하는 함수야
len([1,2,3,4,5])
#이때 요소의 개수를 출력해줘